# File:    $Id: map,v 1.10 2006/07/21 14:18:17 sauber Stab $
# Author:  (c) Soren Dossing, 2005
# License: OSI Artistic License
#          http://www.opensource.org/licenses/artistic-license.php
#田朝阳

########################################################################
#
# INSTRUCTIONS:
#
# This file contains several example of service types. Edit this file to 
# add more service types. The data string from Nagios is in $_ . Use 
# regular expressions to identify and extract data like the examples below
# below.  Match on either output: or perfdata: . The code is pure perl, 
# that will be run inside an eval{}. Results are expected in @s. The
# general format is:
# 
# /output|perfdata:<servicetype> <key>=<value> <key2=value2> .../
# and push @s, [ <databasename>,
#                [ <key>,  GAUGE|DERIVE, <value>  ],
#                [ <key2>, GAUGE|DERIVE, <value2> ],
#                [ .       .              .        ],
#                [ .       .              .        ] ];
# 
# But more advanced code is possible, as long as the resulting 
# data structure is correct.
# 
########################################################################

# Service type: ping
#   output:PING OK - Packet loss = 0%, RTA = 0.00 ms
/output:PING.*?(\d+)%.+?([.\d]+)\sms/
and push @s, [ ping,
               [ losspct, GAUGE, $1      ],
               [ rta,     GAUGE, $2/1000 ] ];

# Service type: single disk
#  output:DISK OK - free space: /tmp 663 MB (90%):
/output:DISK.*free space: (\S+) (\d+) MB \((\d+)\%\)/
and push @s, [ $1,
               [ bytesfree, GAUGE, $2*1024**2 ],
               [ bytesmax, GAUGE, $3 ? $2*1024**2/$3*100 : 'U' ],
               [ pctfree, GAUGE, $3 ] ];

# Service type: all unix-disk
# Note: nagiosplugin requires the inode patch
#   ouput:DISK OK - free space: / 12372 mB (77% inode=96%): /raid 882442 mB (88% inode=91%):
#   perfdata: /=12372mB;14417;15698;96;16019 /raid=882441mB;999780;999780;91;999780
/output:DISK.*inode=/ and do {
  my @_pct = /: (\/.*?) .*?(\d+)% inode=(\S+)%/g;
  while ( my($_d,$_b,$_i) = splice @_pct,0,3 ) {
    my @_s;
    /perfdata:.*$_d=(\d+)\w*?;(\d+);(\d+);(\d+);(\d+)/;
    push @s, [ $_d,
               [ user,     GAUGE, $1*1024**2  ],
               [ wuser,     GAUGE, $2*1024**2  ],
               [ cuser,     GAUGE, $3*1024**2  ],
               [ max,      GAUGE, $5*1024**2  ],
               [ blockpct, GAUGE, $_b ],
               [ inodepct, GAUGE, $_i ] ];
  }
};


# Service type: all unix-disk
# Note: nagiosplugin requires the inode patch
#   ouput:DISKIDX OK - free space: / 12372 mB (77% inode=96%): /raid 882442 mB (88% inode=91%):
#   perfdata: /=12372mB;14417;15698;96;16019 /raid=882441mB;999780;999780;91;999780
/output:IDX.*/ and 
    /perfdata:.*=(\d+)\w*?;(\d+);(\d+);(\d+);(\d+)/
 and  push @s, [ idx,
               [ user,     GAUGE, $1*1024**2  ],
               [ wuser,     GAUGE, $2*1024**2  ],
               [ cuser,     GAUGE, $3*1024**2  ],
               [ max,      GAUGE, $5*1024**2  ]];


# Service type: unix-dns
#   output:DNS OK - 0.008 seconds response time (test.test.1M IN A192.169.0.47)
#   perfdata:time=8260us;;;0
/output:DNS.*?([.0-9]+) sec/
and push @s, [ dns,
               [ response,  GAUGE, $1 ] ];

# Service type: unix-imap
#   output:IMAP OK - 0.009 second response time on port 143
/output:IMAP.*?([-.0-9]+) sec/
and push @s, [ imap,
               [ response, GAUGE, $1 ] ];

# Service type: unix-ldap
#   ouput:LDAP OK - 0.004 seconds response time
#   perfdata:time=3657us;;;0
/output:LDAP.*?([.0-9]+) sec/
and push @s, [ ldap,
               [ response, GAUGE, $1 ] ];

# Service type: unix-load
#   output: OK - load average: 0.66, 0.70, 0.73
#   perfdata:load1=0;15;30;0 load5=0;10;25;0 load15=0;5;20;0
/output:.*load average: ([.0-9]+), ([.0-9]+), ([.0-9]+)/
and push @s, [ load,
               [ avg1min,  GAUGE, $1 ],
               [ avg5min,  GAUGE, $2 ],
               [ avg15min, GAUGE, $3 ] ];

# Service type: unix-mailq
#   output:WARNING: mailq is 5717 (threshold w = 5000)
#   perfdata:unsent=5717;5000;10000;0
/perfdata:unsent=(\d+);(\d+);(\d+);(\d+)/
and push @s, [ mailq,
               [ qsize, GAUGE, $1 ],
               [ qwarn, GAUGE, $2 ],
               [ qcrit, GAUGE, $3 ] ];

# Service type: unix-netstat
#   output:OK
#   perfdata:udpInDatagrams=46517147, udpOutDatagrams=46192507, udpInErrors=0, 
#   tcpActiveOpens=1451583, tcpPassiveOpens=1076181, tcpAttemptFails=1909, 
#   tcpEstabResets=5045, tcpCurrEstab=6, tcpOutDataBytes=3162434373, 
#   tcpInDataBytes=1942718261, tcpRetransBytes=215439
/perfdata:.*udpInDatagrams=(\d+), udpOutDatagrams=(\d+), udpInErrors=(\d+), tcpActiveOpens=(\d+), tcpPassiveOpens=(\d+), tcpAttemptFails=(\d+), tcpEstabResets=(\d+), tcpCurrEstab=(\d+), tcpOutDataBytes=(\d+), tcpInDataBytes=(\d+), tcpRetransBytes=(\d+)/
and push @s, [ udp,
               [ InPkts,  DERIVE, int $1/300 ],
               [ OutPkts, DERIVE, int $2/300 ],
               [ Errors,  DERIVE, int $3/300 ] ],
             [ tcp,
               [ ActOpens,    DERIVE, int $4/300    ],
               [ PsvOpens,    DERIVE, int $5/300    ],
               [ AttmptFails, DERIVE, int $6/300    ],
               [ OutBytes,    DERIVE, int $9/300*8  ],
               [ InBytes,     DERIVE, int $10/300*8 ] ];

# Service type: unix-ntp
#   output:NTP OK: Offset 0.001083 secs, jitter 14.84 msec, peer is stratum 1
/output:NTP.*Offset ([-.0-9]+).*jitter ([-.0-9]+).*stratum (\d+)/
and push @s, [ ntp,
               [ offset,  GAUGE, $1      ],
               [ jitter,  GAUGE, $2/1000 ],
               [ stratum, GAUGE, $3+1    ] ];

# Service type: unix-pop
#   output:POP OK - 0.008 second response time on port 110
/output:POP.*?([.0-9]+) second/
and push @s, [ pop3,
               [ response, GAUGE, $1 ] ];

# Service type: unix-procs
#   output:PROCS OK: 43 processes
/output:PROCS.*?(\d+) processes\n/
and push @s, [ procs,
               [ procs, GAUGE, $1 ] ];

# Service type: unix-smtp
#   output:SMTP OK - 0.187 sec. response time
/output:SMTP.*?([-.0-9]+) sec/
and push @s, [ smtp,
               [ response, GAUGE, $1 ] ];

# Service type: unix-swap
#   output:SWAP OK: 96% free (2616 MB out of 2744 MB)
#   perfdata:swap=2616MB;274;54;0;2744
/perfdata:swap=(\d+)MB;(\d+);(\d+);\d+;(\d+)/
and push @s, [ swap,
               [ swapfree, GAUGE, $1*1024**2 ],
               [ swapwarn, GAUGE, $2*1024**2 ],
               [ swapcrit, GAUGE, $3*1024**2 ],
               [ swapmax,  GAUGE, $4*1024**2 ] ];

# Service type: unix-users
#   output:USERS OK - 4 users currently logged in
#   perfdata:users=4;5;10;0 
/perfdata:users=(\d+);(\d+);(\d+)/
and push @s, [ procs,
               [ users, GAUGE, $1 ],
               [ uwarn,  GAUGE, $2 ],
               [ ucrit,  GAUGE, $3 ] ];

# Service type: unix-zombies
#   ouput:PROCS OK: 0 processes with STATE = Z
/output:PROCS.*?(\d+) processes.*Z/
and push @s, [ zombie,
               [ zombies, GAUGE, $1 ] ];

# Service type: unix-www
#   ouput:HTTP OK HTTP/1.1 200 OK - 1456 bytes in 0.003 seconds
/output:HTTP.*?(\d+) byte.*?([.0-9]+) sec/
and push @s, [ http,
               [ bps, GAUGE, $1/$2 ] ];

# Service type: unix-tcp
#   output:TCP OK - 0.061 second response time on port 22
#   perfdata:time=0.060777s;0.000000;0.000000;0.000000;10.000000
/output:TCP.*?on port (\d+)\s*perfdata:time=(\d+\.\d+).*(\d+\.\d+)\D*(\d+\.\d+)\D*(\d+\.\d+)\D*(\d+\.\d+)/
and push @s, [ "tcp_$1",
               [ 'connect_time',   GAUGE, $2 ],
               [ 'warning_time',   GAUGE, $3 ],
               [ 'critical_time',  GAUGE, $4 ],
               [ 'socket_timeout', GAUGE, $6 ],
             ];

#servicedscr:ALIVE
#output:ALIVE OK - 10001hh
#perfdata:alivetime=1002hh
#
/output:*ALIVE.*?(\d+)hh*/ 
and 
/perfdata:.*?(\d+)hh/
and push @s, [ ALIVE,
               [ alivesec,  GAUGE, $1 ] ];

#servicedscr:FILEUPDATA
#output:FILEUPDATA  OK
#perfdata:filename=search_debug.log; currenttime_file=2007-08-15 08:48:46; dptime=16s
/output:FILEUPDATA.*?/
and
/perfdata:filename=(\S+). currenttime_file=(\S+).(\S+). dptime=(\d+)s/
and push @s, [ FILEUPDATA,
               [ LOGTIMEGAP,  GAUGE, $4 ] ];

#servicedscr:CLUEDOWN
#output:CLUEDOWN OK - updatetime=2007-07-25 20:08:01; cluescount=4096
#perfdata:
/output:CLUEDOWN.*?=(\S+).(\S+). cluescount=(\d+)/
and push @s, [ CLUEDOWN,
               [ cluecount,  GAUGE, $3 ] ];

#servicedscr:QUEUENUM
#output:QUEUENUM OK - 91005
#perfdata:queuenum=91005
/output:QUEUENUM.*?(\d+)/
and push @s, [ QUEUENUM,
               [ queuenum,  GAUGE, $1 ] ];

#servicedscr:DATANUM
#output:DATANUM OK - datanum=21392343
#perfdata:
/output:DATANUM.*?=(\d+)/
and push @s, [ DATANUM,
               [ datas,  GAUGE, $1 ] ];

#servicedscr:DPPROC
#output:DPPROC 0K inetrace;configsrv;auth;av;email;game;http;im;other;telftp
#perfdata:inetrace=100;1111KB; configsrv=100;1111KB; auth=100;1111KB; av=200;2222KB; email=300;3333KB; \
#game=400;4444KB; http=500;5555KB; im=600;6666KB; other=700;7777KB; telftp=800;8888KB;
# Insert here a map entry to parse the nagios plugin data above.
/output:DPPROC.*/ and /perfdata:(\S+)=.(\d+).KBytes..(\d+). (\S+)=.(\d+).KBytes..(\d+). (\S+)=.(\d+).KBytes..(\d+). (\S+)=.(\d+).KBytes..(\d+). (\S+)=.(\d+).KBytes..(\d+). (\S+)=.(\d+).KBytes..(\d+). (\S+)=.(\d+).KBytes..(\d+). (\S+)=.(\d+).KBytes..(\d+)/
and push @s, [ DPPROCCPU,
                 [ "$1", GAUGE, $2 ],
                 [ "$4", GAUGE, $5 ],
                 [ "$7", GAUGE, $8 ],
                 [ "$10", GAUGE, $11 ],
                 [ "$13", GAUGE, $14 ],
                 [ "$16", GAUGE, $17 ],
                 [ "$19", GAUGE, $20 ],
                 [ "$22", GAUGE, $23 ]],
               [ DPPROCMEM,
                 [ "$1", GAUGE, $3 ],
                 [ "$4", GAUGE, $6 ],
                 [ "$7", GAUGE, $9 ],
                 [ "$10", GAUGE, $12 ],
                 [ "$13", GAUGE, $15 ],
                 [ "$16", GAUGE, $18 ],
                 [ "$19", GAUGE, $21 ],
                 [ "$22", GAUGE, $24 ]];
                  
#servicedscr:HLXWDATA
#output:HLXWDATA OK auth;email;ftp;game;http;http_search;im;p2p;passtool;proxy;remote;sms;telnet;voip;webbbs
#perfdata:auth=111; email=222; ftp=333; game=444; http=555; http_search=666; im=777; p2p=888; passtool=999; \
#proxy=000; remote=111; sms=222; telnet=333; voip=444; webbbs=555;
/output:HLXWDATA/
and
/perfdata:(\S+)=(\d+). (\S+)=(\d+). (\S+)=(\d+). (\S+)=(\d+). (\S+)=(\d+). (\S+)=(\d+). (\S+)=(\d+). (\S+)=(\d+). (\S+)=(\d+). (\S+)=(\d+). (\S+)=(\d+). (\S+)=(\d+). (\S+)=(\d+). (\S+)=(\d+). (\S+)=(\d+).*?/
and push @s, [ HLXWDATA,
                 [ "$1",  GAUGE, $2 ],
                 [ "$3",  GAUGE, $4 ],
                 [ "$5",  GAUGE, $6 ],
                 [ "$7",  GAUGE, $8 ],
                 [ "$9",  GAUGE, $10],
                 [ "$11", GAUGE, $12],
                 [ "$13", GAUGE, $14],
                 [ "$15", GAUGE, $16],
                 [ "$17", GAUGE, $18],
                 [ "$19", GAUGE, $20],
                 [ "$21", GAUGE, $22],
                 [ "$23", GAUGE, $24],
                 [ "$25", GAUGE, $26]];

#servicedscr:LIU
#output:RESTARTCOUNT=5
#perfdata:
/output:*RESTARTCOUNT.*?([.\d]+)/
and push @s, [ RESTARTCOUNT,
               [ rstcount,  GAUGE, $1 ] ];

#servicedscr:LIU
#output:LIU 0K - eth0=10kbps; eth1=0kbps; eth2=17090kbps
#perfdata:eth0=10kbps;12003pps;20; eth1=0kbps;0pps;0; eth2=17090kbps;6235334pps;200;
#/output:*LIU.*?([.\d]+)kbps.+?([.\d]+)kbps.+?([.\d]+)kbps/
/output:LIU/
and 
/perfdata:(\S+)=(\d+)kbps.(\d+)kpps.(\d+). (\S+)=(\d+)kbps.(\d+)kpps.(\d+). (\S+)=(\d+)kbps.(\d+)kpps.(\d+)./
and push @s, [ LIUInOcts,
                 [ "$1",  GAUGE, $2 ],
                 [ "$5",  GAUGE, $6 ],
                 [ "$9",  GAUGE, $10]],
              [ LIUInPgs,
                 [ "$1",  GAUGE, $3 ],
                 [ "$5",  GAUGE, $7 ],
                 [ "$9",  GAUGE, $11]],
              [ LIUErrors,
                 [ "$1",  GAUGE, $4 ],
                 [ "$5",  GAUGE, $8 ],
                 [ "$9",  GAUGE, $12]];

#servicedscr:PROCCOUNT
#output:PROCCOUNT OK - proccount=35
#perfdata:
/output:PROCCOUNT.*?(\S+)=(\d+)/
and push @s, [ PROCCOUNT,
               [ $1,  GAUGE, $2 ] ];

#servicedscr:FILESIZE
#output:FILESIZE OK - 1182M
#perfdata:filesize=1182M
/output:FILESIZE.*/ and /perfdata:(\S+)=(\d+)M/
and push @s, [ AJFILESIZE,
                 [ $1, GAUGE, $2 ]];
                  
#servicedscr:DATANUM
#output:DATANUM OK - 691211
#perfdata:datanum=691211
/output:DATANUM.*/ and /perfdata:(\S+)=(\d+)/
and push @s, [ DATANUM,
                 [ $1, GAUGE, $2 ]];

#servicedscr:CLUEDOWN
#output:CLUEDOWN OK - updatetime=2007-08-03 14:05:47;cluescount=2496
#perfdata:
/output:CLUEDOWN.*/ and /perfdata:(\S+)=(\d+)/
and push @s, [ CLUEDOWN,
                 [ $1, GAUGE, $2 ]];

#servicedscr:WEBLOGIN
#output:WEBLOGIN OK - 35
#perfdata:counter=35;
/output:WEBLOGIN.*/ and /perfdata:(\S+)=(\d+)./
and push @s, [ WEBLOGIN,
                 [ $1, GAUGE, $2 ]];

# Insert here a map entry to parse the nagios plugin data above.
#servicedscr:DPDEBUG
#output:DPDEBUG 0K
#perfdata:MemfileItem(Total/MaxUsed/Used):102400/43819/32953 MemfileBlock(Total/MaxUsed/Used):65536/65536/56362 ConvertQueue(Len/Drops):4931/11239757
/output:DPDEBUG.*/ and /perfdata:.*?:(\d+)\/(\d+)\/(\d+).*?:(\d+)\/(\d+)\/(\d+).*?:(\d+)\/(\d+)/
and push @s, [ DPDEBUG,
               [ MEMFILEITEM, GAUGE, $3 ],
               [ MEMFILEBLOCK,GAUGE, $6 ]];

#servicedscr:HLXWDATAALL
#output:HLXWDATAALL OK 9583062
#perfdata:dataall=9583062
/output:HLXWDATAALL.*/ and /perfdata:(\S+)=(\d+)/
and push @s, [ HLXWDATAALL,
                 [ $1, GAUGE, $2 ]];
